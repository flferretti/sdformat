load("@buildifier_prebuilt//:rules.bzl", "buildifier", "buildifier_test")
load("@rules_gazebo//gazebo:headers.bzl", "gz_configure_header", "gz_export_header")
load("@rules_license//rules:license.bzl", "license")

package(
    default_applicable_licenses = [":license"],
)

license(
    name = "license",
    package_name = "sdformat",
)

licenses(["notice"])

exports_files([
    "package.xml",
    "LICENSE",
    "MODULE.bazel",
])

gz_export_header(
    name = "Export",
    out = "include/sdf/Export.hh",
    export_base = "GZ_SDFORMAT",
    lib_name = "sdformat",
)

gz_configure_header(
    name = "Config",
    src = "include/sdf/config.hh.in",
    defines = {
        "CMAKE_INSTALL_FULL_DATAROOTDIR": "unused",
        "SDF_PROTOCOL_VERSION": "11111",
    },
    package_xml = "package.xml",
)

py_binary(
    name = "embed_sdf",
    srcs = ["sdf/embedSdf.py"],
    main = "sdf/embedSdf.py",
)

genrule(
    name = "embed_sdf_genrule",
    srcs = glob([
        "sdf/**/*.sdf",
        "sdf/**/*.convert",
    ]),
    outs = ["EmbeddedSdf.cc"],
    cmd = "$(execpath :embed_sdf) --output-file $@ --sdf-root sdf/ --input-files $(SRCS)",  # noqa
    tools = [":embed_sdf"],
)

cc_library(
    name = "urdf_parser",
    srcs = [
        "src/urdf/urdf_parser/joint.cpp",
        "src/urdf/urdf_parser/link.cpp",
        "src/urdf/urdf_parser/model.cpp",
        "src/urdf/urdf_parser/pose.cpp",
        "src/urdf/urdf_parser/twist.cpp",
        "src/urdf/urdf_parser/urdf_model_state.cpp",
        "src/urdf/urdf_parser/urdf_sensor.cpp",
        "src/urdf/urdf_parser/world.cpp",
    ],
    hdrs = glob(
        ["src/urdf/**/*.h"],
    ),
    copts = ["-Wno-unknown-pragmas"],
    includes = ["src/urdf"],
    deps = [
        "@tinyxml2",
    ],
)

cc_library(
    name = "sdformat",
    srcs = glob(
        include = [
            "src/*.cc",
            "src/*.hh",
            "src/bazel/*.cc",
        ],
        exclude = [
            "src/*_TEST.cc",
        ],
    ) + ["EmbeddedSdf.cc"],
    hdrs = glob(
        include = [
            "include/sdf/*.hh",
        ],
        exclude = [
        ],
    ),
    defines = [
        "CMAKE_INSTALL_RELATIVE_DATAROOTDIR=\\\"\\\"",
        'SDF_SHARE_PATH=\\".\\"',
        'SDF_VERSION_PATH=\\"sdformat\\"',
    ],
    includes = [
        "include",
        "src",
    ],
    data = [
        "sdf"
    ],
    deps = [
        ":Config",
        ":Export",
        ":urdf_parser",
        "@gz-math//:Angle",
        "@gz-math//:Box",
        "@gz-math//:Capsule",
        "@gz-math//:Color",
        "@gz-math//:Cone",
        "@gz-math//:Cylinder",
        "@gz-math//:Ellipsoid",
        "@gz-math//:Graph",
        "@gz-math//:Inertial",
        "@gz-math//:Pose3",
        "@gz-math//:SemanticVersion",
        "@gz-math//:Sphere",
        "@gz-math//:SphericalCoordinates",
        "@gz-math//:Temperature",
        "@gz-math//:Vector2",
        "@gz-utils//:Environment",
        "@gz-utils//:ImplPtr",
    ],
)

cc_test(
    name = "Actor_TEST",
    srcs = [
        "src/Actor_TEST.cc",
    ],
    env = {
        "GZ_BAZEL": "1",
        "GZ_BAZEL_PATH": "sdformat",
    },
    deps = [
        ":sdformat",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "Console_TEST",
    srcs = [
        "src/Console_TEST.cc",
    ],
    deps = [
        ":sdformat",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "Element_TEST",
    srcs = [
        "src/Element_TEST.cc",
    ],
    deps = [
        ":sdformat",
        "//test:test_utils",
        "@googletest//:gtest_main",
    ],
)

# Bazel linting
buildifier(
    name = "buildifier.fix",
    exclude_patterns = ["./.git/*"],
    lint_mode = "fix",
    mode = "fix",
)

buildifier_test(
    name = "buildifier.test",
    exclude_patterns = ["./.git/*"],
    lint_mode = "warn",
    mode = "diff",
    no_sandbox = True,
    workspace = "//:MODULE.bazel",
)
